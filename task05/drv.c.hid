#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/kthread.h>
#include <linux/delay.h>
#include <linux/slab.h>

#include <linux/device.h>
#include <linux/fs.h>
#include <linux/uaccess.h>
#include <linux/delay.h>
#include <linux/usb/input.h>
#include <linux/hid.h>


MODULE_LICENSE("GPL");


static int usb_task05_probe(struct hid_device *hdev, const struct hid_device_id *id)
{
	pr_debug("usb_task05_probe\b");
	return 0;
}

static const struct hid_device_id usb_task05_devices[] = {
	{ HID_USB_DEVICE(0x04ca, 0x0061),
		.driver_data = 0xffff },
	{ }
};
MODULE_DEVICE_TABLE(hid, usb_task05_devices);

static struct hid_driver usb_task05_driver = {
	.name = "usb_task05",
	.id_table = usb_task05_devices,
	/* .report_fixup = usb_task05_report_fixup, */
	/* .input_mapped = usb_task05_input_mapped, */
	/* .event = usb_task05_event, */
	.probe = usb_task05_probe,
};
module_hid_driver(usb_task05_driver);

MODULE_LICENSE("GPL");
